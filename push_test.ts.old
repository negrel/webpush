import { bytes, decodeBase64Url, ece, encodeBase64Url } from "./deps.ts";

function importEcdh(
  crypto: SubtleCrypto,
  { publicKey, privateKey }: {
    publicKey: ArrayBuffer;
    privateKey: ArrayBuffer;
  },
): Promise<CryptoKey> {
  const x = publicKey.slice(1, 32 + 1);
  const y = publicKey.slice(32 + 1);

  const jwkKey = {
    crv: "P-256",
    d: encodeBase64Url(privateKey),
    kty: "EC",
    x: encodeBase64Url(x),
    y: encodeBase64Url(y),
  };

  return crypto.importKey(
    "jwk",
    jwkKey,
    { name: "ECDH", namedCurve: "P-256" },
    true,
    ["deriveKey"],
  );
}

async function hmacSha256Digest(
  crypto: SubtleCrypto,
  secret: CryptoKey | ArrayBuffer,
  body: BufferSource,
  length?: number,
): Promise<ArrayBuffer> {
  console.log("hmac secret", secret);

  if (secret instanceof ArrayBuffer) {
    console.log("importing secret for hmac");
    secret = await crypto.importKey(
      "raw",
      secret,
      {
        name: "HMAC",
        hash: "SHA-256",
      },
      false,
      ["sign"],
    );
  }

  console.log(secret);
  const result = await crypto.sign("HMAC", secret, body);

  if (length !== null) return result.slice(0, length);

  return result;
}

function hkdfSha256Extract(
  crypto: SubtleCrypto,
  salt: ArrayBuffer,
  ikm: ArrayBuffer,
) {
  if (salt.byteLength === 0) {
    salt = new Uint8Array(256).fill(0).buffer.slice(0);
  }

  return hmacSha256Digest(crypto, salt, ikm);
}

async function hkdfSha256Expand(
  crypto: SubtleCrypto,
  prk: ArrayBuffer,
  info: ArrayBuffer,
  length: number,
) {
  const infoBytes = new Uint8Array(info);

  let t = new Uint8Array(0);
  let okm = new Uint8Array(0);
  let i = 0;
  while (okm.byteLength < length) {
    i++;
    t = new Uint8Array(
      await hmacSha256Digest(crypto, prk, bytes.concat([t, infoBytes])),
    );
    okm = bytes.concat([okm, t]);
  }

  return okm.slice(0, length);
}

async function ecdh(
  crypto: SubtleCrypto,
  { privateKey, publicKey }: CryptoKeyPair,
) {
  const ecdhKey = await crypto.deriveKey(
    { name: "ECDH", public: publicKey },
    privateKey,
    {
      name: "AES-GCM",
      length: 256,
    },
    true,
    ["encrypt", "decrypt"],
  );

  return crypto.exportKey("raw", ecdhKey);
}

// https://www.rfc-editor.org/rfc/rfc8291#appendix-A
Deno.test("pushMessage/RFC8291/Example1", async () => {
  const crypto = globalThis.crypto.subtle;

  const plainText = decodeBase64Url(
    "V2hlbiBJIGdyb3cgdXAsIEkgd2FudCB0byBiZSBhIHdhdGVybWVsb24",
  );

  // Application server public & private key.
  const asPublic = decodeBase64Url(
    "BP4z9KsN6nGRTbVYI_c7VJSPQTBtkgcy27mlmlMoZIIgDll6e3vCYLocInmYWAmS6TlzAC8wEqKK6PBru3jl7A8",
  );
  const asPrivate = decodeBase64Url(
    "yfWPiYE-n46HLnH0KqZOF1fJJU3MYrct3AELtAQ-oRw",
  );
  const asPrivateKey = await importEcdh(crypto, {
    publicKey: asPublic,
    privateKey: asPrivate,
  });

  const authSecret = decodeBase64Url("BTBZMqHH6r4Tts7J_aSIgg");

  // User agent public & private key.
  const uaPublic = decodeBase64Url(
    "BCVxsr7N_eNgVRqvHtD0zTZsEc6-VV-JvLexhqUzORcxaOzi6-AYWXvTBHm4bjyPjs7Vd8pZGH6SRpkNtoIAiw4",
  );

  const uaPublicKey = await crypto.importKey(
    "raw",
    uaPublic,
    {
      "name": "ECDH",
      namedCurve: "P-256",
    },
    true,
    [],
  );

  const ecdhSecret = await ecdh(crypto, {
    privateKey: asPrivateKey,
    publicKey: uaPublicKey,
  });

  console.log(
    "ECDH OK",
    encodeBase64Url(ecdhSecret),
  );

  const prkKey = await hkdfSha256Extract(
    crypto,
    authSecret.buffer.slice(0),
    ecdhSecret,
  );
  console.log(
    "PRK KEY OK",
    encodeBase64Url(prkKey),
  );

  const encoder = new TextEncoder();
  const keyInfo = bytes.concat([
    encoder.encode("WebPush: info\0"),
    uaPublic,
    asPublic,
  ]);

  console.log("KEY INFO OK", encodeBase64Url(keyInfo));

  const ikm = await hkdfSha256Expand(
    crypto,
    prkKey,
    bytes.concat([keyInfo, new Uint8Array(1).fill(1)]),
    32,
  );

  const salt = decodeBase64Url("DGv6ra1nlYgDCS1FRnbzlw");
  const nonceInfo = decodeBase64Url("Q29udGVudC1FbmNvZGluZzogbm9uY2UA");
  const info = decodeBase64Url("Q29udGVudC1FbmNvZGluZzogYWVzMTI4Z2NtAA");

  const result = await ece.encrypt(plainText, ikm, {
    info,
    nonceInfo,
    header: { salt, rs: 4096, keyid: asPublic },
  });

  console.log(encodeBase64Url(result).slice(0, 32));
  console.log(encodeBase64Url(result).slice(32, 64));
  console.log(encodeBase64Url(result).slice(64, 64 + 32));
  console.log(encodeBase64Url(result).slice(64 + 32, 64 + 32 + 19));
  console.log(encodeBase64Url(result).slice(64 + 32 + 19));
});
